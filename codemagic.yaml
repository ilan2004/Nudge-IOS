workflows:
  ios-unsigned-build:
    name: iOS Unsigned Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      vars:
        XCODE_PROJECT: "Nudge.xcodeproj"     # Update with actual project name
        XCODE_SCHEME: "Nudge"                # Update with your scheme name
        BUNDLE_ID: "com.ilan2004.nudge"      # Replace with your bundle ID
      xcode: latest
      cocoapods: default
    scripts:
      - name: Prepare for unsigned build
        script: |
          echo "Preparing for unsigned build - code signing disabled"
      - name: Get CocoaPods dependencies (if any)
        script: |
          if [ -f "Podfile" ]; then
            pod install
          fi
      - name: Validate project presence (non-fatal)
        script: |
          echo "PWD: $PWD"
          ls -la || true
          if [ -d "Core" ]; then ls -la Core || true; fi
          if [ -d "Features" ]; then ls -la Features || true; fi
          if [ -d "UI" ]; then ls -la UI || true; fi
          if [ -d "Resources" ]; then ls -la Resources || true; fi
          if [ ! -d "$XCODE_PROJECT" ]; then echo "Warning: $XCODE_PROJECT not found"; fi
      - name: Build unsigned archive
        script: |
          mkdir -p "$PWD/build/ios/ipa"
          echo "Building with project: $XCODE_PROJECT, scheme: $XCODE_SCHEME"
          xcodebuild archive \
            -project "$XCODE_PROJECT" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$PWD/build/$XCODE_SCHEME.xcarchive" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PROVISIONING_PROFILE="" \
            ENABLE_PREVIEWS=NO \
            DEVELOPMENT_ASSET_PATHS="" \
            -verbose
      - name: Verify bundled fonts in archive (fail if missing)
        script: |
          APP_PATH="$PWD/build/$XCODE_SCHEME.xcarchive/Products/Applications/$XCODE_SCHEME.app"
          if [ ! -d "$APP_PATH" ]; then echo "Archive missing app at $APP_PATH" >&2; exit 1; fi
          echo "Listing bundled Tanker fonts:"; find "$APP_PATH" -maxdepth 2 -iname "*tanker*.*" -print || true
          echo "Reading UIAppFonts from Info.plist:"; /usr/libexec/PlistBuddy -c 'Print :UIAppFonts' "$APP_PATH/Info.plist" || echo "No UIAppFonts key"
          if ! /usr/libexec/PlistBuddy -c 'Print :UIAppFonts' "$APP_PATH/Info.plist" 2>/dev/null | grep -qi "Tanker-Regular.otf"; then
            echo "Error: UIAppFonts missing Tanker-Regular.otf" >&2; exit 1; fi
          if ! find "$APP_PATH" -maxdepth 1 -iname "Tanker-Regular.otf" | grep -q "."; then
            echo "Error: Tanker-Regular.otf not found in app bundle root (Copy Bundle Resources)" >&2; exit 1; fi
      - name: Create IPA manually
        script: |
          echo "Archive succeeded! Creating IPA manually..."
          mkdir -p "$PWD/build/ios/ipa/Payload"
          APP_PATH="$PWD/build/$XCODE_SCHEME.xcarchive/Products/Applications/$XCODE_SCHEME.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: App not found at $APP_PATH" >&2
            echo "Contents of archive Applications directory:"; ls -la "$PWD/build/$XCODE_SCHEME.xcarchive/Products/Applications" || true
            exit 1
          fi
          cp -R "$APP_PATH" "$PWD/build/ios/ipa/Payload/"
          (cd "$PWD/build/ios/ipa" && zip -r "$XCODE_SCHEME".ipa Payload)
          echo "âœ… IPA created successfully!"
          ls -la "$PWD/build/ios/ipa"/*.ipa || true
    artifacts:
      - build/ios/ipa/*.ipa
      - build/*.xcarchive
    publishing:
      # Uncomment and configure if you want to publish to external services
      # slack:
      #   channel: '#ios-builds'
      #   notify_on_build_start: true
      #   notify:
      #     success: true
      #     failure: true
      email:
        recipients:
          - your-email@example.com # Replace with your email
        notify:
          success: true
          failure: true
